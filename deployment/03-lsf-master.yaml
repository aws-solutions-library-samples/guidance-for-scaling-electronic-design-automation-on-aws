AWSTemplateFormatVersion: "2010-09-09"
Description: |
  This template deploys an LSF master server, a supporting EFS file system, and
  installs the LSF packages provided by the user.

  **WARNING** This template creates AWS resources. 
  You will be billed for the AWS resources used if you create a stack from this template.

Mappings:
  RegionMap:
    us-east-1:  
      CentOS75: ami-9887c6e7
      FPGADev15: ami-0a71d776cea7922c1
      ALinux2: ami-035be7bafff33b6b6o
      RHEL76Graviton: ami-0e3688b4a755ad736
    us-east-2:  
      CentOS75: ami-0f2b4fc905b0bd1f1
      FPGADev15: ami-0d3e8847d15d9ad72
      ALinux2: ami-04328208f4f0cf1fe
      RHEL76Graviton: ami-0302c1ecc74930ba5
    us-west-1:
      CentOS75: ami-074e2d6769f445be5
      FPGADev15: ami-06fd3aab7a08e942d
      ALinux2: ami-0799ad445b5727125
    us-west-2:
      CentOS75: ami-3ecc8f46
      FPGADev15: ami-068ef4610de0dfb70
      ALinux2: ami-032509850cf9ee54e
      RHEL76Graviton: ami-0e00026dd0f3688e2
    eu-west-1:           # Dublin
      CentOS75: ami-3548444c
      FPGADev15: ami-0521b6e4d86dad1f1
      ALinux2: ami-0fad7378adf284ce0
      RHEL76Graviton: ami-0b5171a7b859ff1b4
    ap-southeast-1:      # Singapore
      CentOS75: ami-8e0205f2
      FPGADev15: ami-0c4b3ff18b42e34a8
      ALinux2: ami-04677bdaa3c2b6e24
    ap-southeast-2:      # Sydney
      CentOS75: ami-d8c21dba
      FPGADev15: ami-000e49a33676e256a
      ALinux2: ami-0c9d48b5db609ad6e
    ap-northeast-2:      # Seoul
      CentOS75: ami-06cf2a72dadf92410
      FPGADev15: ami-0bbca7ce2aa871d41
      ALinux2: ami-018a9a930060d38aa
    ap-northeast-1:      # Tokyo
      CentOS75: ami-045f38c93733dd48d
      FPGADev15: ami-0f741966c7ef2c378
      ALinux2: ami-0d7ed3ddb85b521a6

Parameters:
  AdminKeyPair:
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the master server."
    Type: "AWS::EC2::KeyPair::KeyName"
    AllowedPattern: ".+"

  MasterInstanceType:
    Description: "The desired instance type for the master node of the cluster."
    Type: "String"
    Default: "m5.2xlarge"
  MasterServerAMI:
    Description: AMI (OS image) for the master server. 
      NOTE - You must first subscribe to this AMI in the AWS Marketplace at https://aws.amazon.com/marketplace/pp/B00O7WM7QW
    Type: "String"
    Default: "ALinux2"
    AllowedValues:
      - ALinux2
      - CentOS75
  ComputeAMI:
    Description: AMI (OS image) for the compute nodes.  
      NOTE - You must first subscribe to this AMI in the AWS Marketplace at https://aws.amazon.com/marketplace/pp/B00O7WM7QW"
    Type: "String"
    Default: "CentOS75"
    AllowedValues:
      - CentOS75
      - FPGADev15
      - RHEL76Graviton
  GravitonAMI:
    Description: AMI (OS image) for the graviton compute nodes.  
    Type: "String"
    Default: "RHEL76Graviton"
    AllowedValues:
      - RHEL76Graviton
  LSFClusterName:
    Description: "The name of the LSF cluster."
    Type: "String"
    Default: "cde-1"
  LSFInstallPath:
    Description: From NFS template. Shared NFS file system for installing LSF. 
      Derive this from an Export or Parameter Store key.
    Type: "String"
    Default: "/tools/ibm/lsf"
  OnPremFileSystemId:
    Description: OnPrem File System ID
    Type: String
  OnPremSvmId:
    Description: OnPrem Storage Virtual Machine ID
    Type: String
  CloudFileSystemId:
    Description: Cloud File System ID
    Type: String
  CloudSvmId:
    Description: Cloud Storage Virtual Machine ID
    Type: String
  ScratchDir:
    Description: The name for the runtime scratch data subdirectory
    Type: String
    Default: scratch
    AllowedPattern: ^.+
  ProjectDir:
    Description: The name for the project design data subdirectory
    Type: String
    Default: proj
    AllowedPattern: ^.+
  CustomerLSFInstallUri:
    Description: >
      The S3 URI to the LSF installation script package. 
      Select object in the console and choose Copy Path and paste here.
    Type: "String"
    Default: "s3://<your_bucket>/lsf10.1_lsfinstall_linux_x86_64.tar.Z"
  CustomerLSFBinsUri:
    Description: The S3 URI to the LSF 10.1 Linux base distribution package. 
      Select object in the console and choose Copy Path and paste here.
    Type: "String"
    Default: "s3://<your_bucket>/lsf10.1_linux2.6-glibc2.3-x86_64.tar.Z"
  CustomerLSFBinsArchUri:
    Description: The S3 URI to the LSF 10.1 Linux base distribution package for aarch64. 
      Select object in the console and choose Copy Path and paste here.
    Type: "String"
    Default: "s3://<your_bucket>/lsf10.1_lnx312-lib217-armv8.tar.Z"
  CustomerLSFFixPackUri:
    Description: >
      The S3 URI to the LSF 10.1 Fix Pack package. This must the lastest cumulative Fix Pack package.
      Select package object in the console and choose Copy Path and paste here.
    Type: "String"
    Default: "s3://<your_bucket>/lsf10.1_linux2.6-glibc2.3-x86_64.520009.tar.Z"
  CustomerLSFFixPackArchUri:
    Description: >
      The S3 URI to the LSF 10.1 Fix Pack package. This must the lastest cumulative Fix Pack package for aarch64.
      Select package object in the console and choose Copy Path and paste here.
    Type: "String"
    Default: "s3://<your_bucket>/lsf10.1_lnx312-lib217-armv8-601088.tar.Z"
  CustomerLSFEntitlementUri:
    Description: The S3 URI to the LSF entitlement file, lsf_std_entitlement.dat or lsf_adv_entitlement.dat.
      Select object in the S3 console and choose Copy Path and paste here.
    Type: String
    Default: s3://<your_bucket>/lsf_std_entitlement.dat
  EFSPerformanceMode:
    Description: "Select the performance mode of the file system."
    Type: "String"
    AllowedValues:
      - generalPurpose
      - maxIO
    Default: "generalPurpose"
  EFSThroughputMode:
    Type: "String"
    AllowedValues:
      - bursting
      - provisioned
    Default: "bursting"
  DCVUserName:
    Type: String
    Default: simuser
  SourceS3Bucket:
    Description: url prefix for the bucket that has all the files for deploying this prototype. 
    Type: String

Resources:
  LSFMasterInstance:
    Type: "AWS::EC2::Instance"
    DependsOn: LSFEFSMountTarget
    CreationPolicy:
      ResourceSignal:    
        Count: 1
        Timeout: PT15M
    Properties:
      InstanceType: !Ref MasterInstanceType
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - !Ref AWS::Region
        - !Ref MasterServerAMI
      SubnetId:
          Fn::ImportValue: !Join [ '-', [ !Ref LSFClusterName,"PrivateSubnet" ] ]
      SecurityGroupIds:
        - Fn::ImportValue: !Join [ '-', [ !Ref LSFClusterName,"LSFMasterSG" ] ]
      KeyName: !Ref AdminKeyPair
      IamInstanceProfile: !Ref LSFMasterInstanceProfile
      Monitoring: true
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 10
            Encrypted: true
            DeleteOnTermination: true
            VolumeType: gp2
      Tags:
        - 
          Key: "Name"
          Value: !Join [ '-', [ 'LSF Primary',!Ref LSFClusterName ] ]
        - 
          Key: "Cluster"
          Value: !Ref LSFClusterName
      UserData:
        Fn::Base64: 
          Fn::Sub:
            - |
              #!/bin/bash

              set -x
              exec > >(tee /var/log/user-data.log|logger -t user-data ) 2>&1

              echo "*** BEGIN LSF MASTER BOOTSTRAP ***"

              export LSF_INSTALL_DIR="${LSFInstallPath}/${LSFClusterName}"
              export LSF_INSTALL_DIR_ROOT="/`echo $LSF_INSTALL_DIR | cut -d / -f2`"
              export EFS_FS_DNS_NAME="${LSFElasticFileSystem}.efs.${AWS::Region}.amazonaws.com"
              export LSF_ADMIN=lsfadmin
              export LSF_INSTALL_PKG=`echo ${CustomerLSFInstallUri} | awk -F "/" '{print $NF}'`
              export LSF_BIN_PKG=`echo ${CustomerLSFBinsUri} | awk -F "/" '{print $NF}'`
              export LSF_BIN_ARCH_PKG=`echo ${CustomerLSFBinsArchUri} | awk -F "/" '{print $NF}'`
              export LSF_FP_PKG=`echo ${CustomerLSFFixPackUri} | awk -F "/" '{print $NF}'`
              export LSF_FP_ARCH_PKG=`echo ${CustomerLSFFixPackArchUri} | awk -F "/" '{print $NF}'`
              export LSF_ENTITLEMENT=`echo ${CustomerLSFEntitlementUri} | awk -F "/" '{print $NF}'`

              # OS Image
              OSAMI="${MasterServerAMI}"

              # Disable Hyperthreading
              echo "Disabling Hyperthreading"
              for cpunum in $(cat /sys/devices/system/cpu/cpu*/topology/thread_siblings_list | cut -s -d, -f2- | tr ',' '\n' | sort -un)
              do
                echo 0 > /sys/devices/system/cpu/cpu$cpunum/online
              done

              # Install Basic Calculator
              yum install -y bc

              # Install cfn-signal helper script to signal bootstrap completion to CloudFormation
              if [[ $OSAMI == "CentOS75" ]]; then
                yum install epel-release -y
                yum install -y install python-pip
                pip install pystache
                pip install argparse
                pip install requests
                yum install -y https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.amzn1.noarch.rpm
                ln -s /usr/local/lib/python2.7/site-packages/cfnbootstrap /usr/lib/python2.7/site-packages/cfnbootstrap
              else
                yum update -y aws-cfn-bootstrap
              fi

              # Install LSF installer prereqs
              yum install ed -q -y
              yum install java-1.8.0-openjdk -q -y
              yum install wget -q -y
              yum install vim -q -y

              # Install SSM so we can use SSM Session Manager and avoid ssh logins.
              yum install -q -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
              systemctl enable amazon-ssm-agent
              systemctl start amazon-ssm-agent

              ## Mount EFS file system for LSF install
              #mount point
              mkdir $LSF_INSTALL_DIR_ROOT
              
              #mount EFS file system
              mount -t nfs4 -o rw,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 $EFS_FS_DNS_NAME:/ $LSF_INSTALL_DIR_ROOT
              #add to fstab
              echo "$EFS_FS_DNS_NAME:/ $LSF_INSTALL_DIR_ROOT nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 0 0" >> \
                /etc/fstab

              mkdir -p $LSF_INSTALL_DIR
              mkdir /var/log/lsf && chmod 777 /var/log/lsf

              # Remove AWS CLI version 1
              sudo rm -rf /usr/local/aws
              sudo rm /usr/local/bin/aws

              # Instsall AWS CLI version 2
              pip3 install boto3
              sudo yum install -y unzip
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
              export PATH=/usr/local/bin:$PATH

              # TODO: Setup CloudWatch Logs daemon and send LSF logs to CloudWatch
              # TODO: Install CodeDeploy agent so that we can push LSF config file changes from CodeCommit repo
              # See docs

              LSF_CLUSTER_NAME="${LSFClusterName}" 

              if [[ $LSF_CLUSTER_NAME == *"Region-A"* ]]; then 
                export NFSENDPOINT=$(aws fsx describe-storage-virtual-machines --storage-virtual-machine-ids ${OnPremSvmId} --query StorageVirtualMachines[].Endpoints.Nfs.DNSName --output text)
                export CloudNFSENDPOINT=$(aws fsx describe-storage-virtual-machines --storage-virtual-machine-ids ${CloudSvmId} --query StorageVirtualMachines[].Endpoints.Nfs.IpAddresses --output text)
                cat << EOF >> /tmp/fsx-setup.sh
                #!/bin/bash
                export NFSENDPOINT=$(aws fsx describe-storage-virtual-machines --storage-virtual-machine-ids ${OnPremSvmId} --query StorageVirtualMachines[].Endpoints.Nfs.DNSName --output text)
                cd /
                mkdir /${ProjectDir}
                mkdir /${ScratchDir}
                sudo mount -t nfs \$NFSENDPOINT:/vol1_onprem /${ProjectDir}
                sudo mount -t nfs \$NFSENDPOINT:/scratch_cached /${ScratchDir}
                echo "\$NFSENDPOINT:/vol1_onprem /${ProjectDir} nfs nfsvers=3,defaults 0 0" >> /etc/fstab
                echo "\$NFSENDPOINT:/scratch_cached /${ScratchDir} nfs nfsvers=3,defaults 0 0" >> /etc/fstab 
              EOF
              else
                export NFSENDPOINT=$(aws fsx describe-storage-virtual-machines --storage-virtual-machine-ids ${OnPremSvmId} --query StorageVirtualMachines[].Endpoints.Nfs.IpAddresses --output text)
                export CloudNFSENDPOINT=$(aws fsx describe-storage-virtual-machines --storage-virtual-machine-ids ${CloudSvmId} --query StorageVirtualMachines[].Endpoints.Nfs.DNSName --output text)
                cat << EOF >> /tmp/fsx-setup.sh
                #!/bin/bash
                export CloudNFSENDPOINT=$(aws fsx describe-storage-virtual-machines --storage-virtual-machine-ids ${CloudSvmId} --query StorageVirtualMachines[].Endpoints.Nfs.DNSName --output text) 
                cd /
                mkdir /${ProjectDir}
                mkdir /${ScratchDir}
                sudo mount -t nfs \$CloudNFSENDPOINT:/tool_cached /${ProjectDir}
                sudo mount -t nfs \$CloudNFSENDPOINT:/vol1_cloud /${ScratchDir}
                echo "\$CloudNFSENDPOINT:/tool_cached /${ProjectDir} nfs nfsvers=3,defaults 0 0" >> /etc/fstab
                echo "\$CloudNFSENDPOINT:/vol1_cloud /${ScratchDir} nfs nfsvers=3,defaults 0 0" >> /etc/fstab 
              EOF
              fi

              ##############################################
              # Install LSF using customer-provided packages
              ##############################################

              # Add LSF admin account
              adduser -m -u 1500 $LSF_ADMIN
              adduser -m -u 1501 ${DCVUserName}

              # Download customer-provided LSF binaries and entitlement file
              aws --quiet s3 cp ${CustomerLSFInstallUri} /tmp
              aws --quiet s3 cp ${CustomerLSFBinsUri} /tmp
              aws --quiet s3 cp ${CustomerLSFBinsArchUri} /tmp
              aws --quiet s3 cp ${CustomerLSFEntitlementUri} /tmp
              aws --quiet s3 cp ${CustomerLSFFixPackUri} /tmp
              aws --quiet s3 cp ${CustomerLSFFixPackArchUri} /tmp
              
              cd /tmp
              tar xf $LSF_INSTALL_PKG
              cp $LSF_BIN_PKG lsf10.1_lsfinstall
              cd lsf10.1_lsfinstall

              # Create LSF installer config file
              cat << EOF > install.config
              LSF_TOP="$LSF_INSTALL_DIR"
              LSF_ADMINS="$LSF_ADMIN"
              LSF_CLUSTER_NAME="${LSFClusterName}"
              LSF_MASTER_LIST="${!HOSTNAME%%.*}"
              SILENT_INSTALL="Y"
              LSF_SILENT_INSTALL_TARLIST="ALL"
              ACCEPT_LICENSE="Y"
              LSF_ENTITLEMENT_FILE="/tmp/$LSF_ENTITLEMENT"
              EOF

              ./lsfinstall -f install.config

              # Setup LSF environment
              source $LSF_INSTALL_DIR/conf/profile.lsf

              # Install fix pack
              cd $LSF_INSTALL_DIR/10.1/install
              cp /tmp/$LSF_FP_PKG .
              cp /tmp/$LSF_FP_ARCH_PKG .
              echo "schmod_demand.so" >> patchlib/daemonlists.tbl
              ./patchinstall --silent $LSF_FP_PKG
              ./patchinstall --silent $LSF_FP_ARCH_PKG

              ## Create Resource Connector config dir
              mkdir -p $LSF_ENVDIR/resource_connector/aws/conf
              chown -R lsfadmin:root $LSF_ENVDIR/resource_connector/aws

              # Configure LSF and Resource Connector
              # Sets AWS as the sole host provider
              aws s3 cp s3://${SourceS3Bucket}/eda-workshop-cloud-scale/source/config/lsf/hostProviders.json $LSF_ENVDIR/resource_connector/hostProviders.json

              # awsprov.config.json
              aws s3 cp s3://${SourceS3Bucket}/eda-workshop-cloud-scale/source/config/lsf/awsprov_config.json $LSF_ENVDIR/resource_connector/aws/conf/awsprov_config.json
              sed -i -e "s/_CFN_AWS_REGION_/${AWS::Region}/" $LSF_ENVDIR/resource_connector/aws/conf/awsprov_config.json

              # awsprov.templates.json
              aws s3 cp s3://${SourceS3Bucket}/eda-workshop-cloud-scale/source/config/lsf/awsprov_templates.json $LSF_ENVDIR/resource_connector/aws/conf/awsprov_templates.json
              
              sed -i -e "s|%CFN_COMPUTE_AMI%|${LSFComputeNodeAmi}|" \
                     -e "s|%CFN_GRAVITON_COMPUTE_AMI%|${LSFComputeNodeGravitonAmi}|" \
                     -e "s|%CFN_COMPUTE_NODE_SUBNET%|${LSFComputeNodeSubnet}|" \
                     -e "s|%CFN_ADMIN_KEYPAIR%|${AdminKeyPair}|" \
                     -e "s|%CFN_COMPUTE_SECURITY_GROUP_ID%|${LSFComputeNodeSGGroupId}|" \
                     -e "s|%CFN_LSF_COMPUTE_NODE_INSTANCE_PROFILE_ARN%|${LSFComputeNodeInstanceProfileArn}|" \
                     -e "s|%CFN_LSF_CLUSTER_NAME%|${LSFClusterName}|" \
                     -e "s|%CFN_EFS_FS_DNS_NAME%|$EFS_FS_DNS_NAME|" \
                     -e "s|%CFN_LSF_INSTALL_DIR%|$LSF_INSTALL_DIR|" \
                     -e "s|%CFN_PROJ_DIR%|${ProjectDir}|" \
                     -e "s|%CFN_SCRATCH_DIR%|${ScratchDir}|" \
                     -e "s|%CFN_DCV_USER_NAME%|${DCVUserName}|" \
                     -e "s|%CFN_LSF_COMPUTE_NODE_SPOT_FLEET_ROLE_ARN%|${LSFComputeNodeSpotFleetRoleArn}|" \
                     -e "s|%CFN_ONTAP_HOST_NAME%|$NFSENDPOINT|" \
                     -e "s|%CFN_CLOUD_ONTAP_HOST_NAME%|$CloudNFSENDPOINT|" \
                  $LSF_ENVDIR/resource_connector/aws/conf/awsprov_templates.json

              # ec2-fleet-config.json
              aws s3 cp s3://${SourceS3Bucket}/eda-workshop-cloud-scale/source/config/lsf/ec2-fleet-config.json $LSF_ENVDIR/resource_connector/aws/conf/ec2-fleet-config.json

              sed -i -e "s|%CFN_LAUNCH_TEMPLATE%|${LSFLaunchTemplateId}|" \
                     -e "s|%CFN_COMPUTE_NODE_SUBNET1%|${LSFComputeNodeSubnet}|" \
                     -e "s|%CFN_COMPUTE_NODE_SUBNET2%|${LSFComputeNodeSubnet1}|" \
                  $LSF_ENVDIR/resource_connector/aws/conf/ec2-fleet-config.json  

              
              # user_data script that RC executes on compute nodes
              aws s3 cp s3://${SourceS3Bucket}/eda-workshop-cloud-scale/source/config/lsf/user_data.sh $LSF_INSTALL_DIR/10.1/resource_connector/aws/scripts/user_data.sh
              chmod +x $LSF_INSTALL_DIR/10.1/resource_connector/aws/scripts/user_data.sh

              # Copy in pre-configured lsf config files
              aws s3 cp s3://${SourceS3Bucket}/eda-workshop-cloud-scale/source/config/lsf/lsf.shared $LSF_ENVDIR/lsf.shared
              sed -i -e "s/^_CFN_LSF_CLUSTER_NAME_/${LSFClusterName}/" $LSF_ENVDIR/lsf.shared

              aws s3 cp s3://${SourceS3Bucket}/eda-workshop-cloud-scale/source/config/lsf/lsb.queues $LSF_ENVDIR/lsbatch/${LSFClusterName}/configdir/lsb.queues

              aws s3 cp s3://${SourceS3Bucket}/eda-workshop-cloud-scale/source/config/lsf/lsb.modules $LSF_ENVDIR/lsbatch/${LSFClusterName}/configdir/lsb.modules

              aws s3 cp s3://${SourceS3Bucket}/eda-workshop-cloud-scale/source/config/lsf/lsb.params $LSF_ENVDIR/lsbatch/${LSFClusterName}/configdir/lsb.params
              

              # lsf.cluster.*  Uncomment params to support dynamic hosts
              # TODO: set LSF_HOST_ADDR_RANGE to CIDR block of VPC or compute subnet
              sed -i -e 's/#\sLSF_HOST_ADDR_RANGE/LSF_HOST_ADDR_RANGE/' \
                     -e 's/#\sFLOAT_CLIENTS/FLOAT_CLIENTS/' \
                  $LSF_ENVDIR/lsf.cluster.*

              
              # mosquitto.conf.  Enables mostquitto daemon, which RC uses to show bhosts -rc output.
              cat << EOF > $LSF_ENVDIR/mosquitto.conf
              log_dest file /var/log/lsf/mosquitto.log
              log_type all
              EOF
              chown $LSF_ADMIN $LSF_ENVDIR/mosquitto.conf

              # lsf.conf
              # Set logging to local file system
              sed -i -e 's|^LSF_LOGDIR.*|LSF_LOGDIR=/var/log/lsf|' $LSF_ENVDIR/lsf.conf

              cp $LSF_ENVDIR/lsf.conf /tmp/lsf.conf
              cat << EOF >> /tmp/setup.sh
              #!/bin/bash
              export LSF_ENVDIR=$LSF_ENVDIR
              EOF
              
              # lsf.conf. Append RC config to config file that was created by LSF installer.
              cat << EOF >> $LSF_ENVDIR/lsf.conf

              LSF_STRIP_DOMAIN=.ec2.internal:.${AWS::Region}.compute.internal

              ######################################
              # LSF RESOURCE CONNECTOR CONFIGURATION
              ######################################

              LSB_RC_EXTERNAL_HOST_FLAG=aws

              # Adds 'aws' boolean to dynamic hosts
              LSF_LOCAL_RESOURCES="[resource aws] [type LINUX64]"

              #LSB_RC_MAX_INSTANCES_PER_TEMPLATE=1000

              #LSB_RC_DEFAULT_HOST_TYPE=X86_64

              LSB_RC_UPDATE_INTERVAL=10

              LSB_RC_QUERY_INTERVAL=15

              # Let LSB_RC_EXTERNAL_HOST_IDLE_TIME below shut down idle instances
              #LSB_RC_EXTERNAL_HOST_MAX_TTL=10

              LSB_RC_EXTERNAL_HOST_IDLE_TIME=10

              # starts the mosquitto daemon, which is required for the bhosts -rc and
              # bhosts -rconly commands to work.
              # mosquitto runs on default port 1883.
              LSF_MQ_BROKER_HOSTS=$HOSTNAME
              # The params below allow remote clients to query RC status from mosquitto
              MQTT_BROKER_HOST=$HOSTNAME
              MQTT_BROKER_PORT=1883

              #EBROKERD_HOST_CLEAN_DELAY=60

              ######################################
              # DYNAMIC HOST CONFIGURATION
              ######################################

              # Keep this less than 3 seconds for smooth RC operation.
              LSF_DYNAMIC_HOST_WAIT_TIME=3

              #LSF_REG_FLOAT_HOSTS=Y

              #LSF_DYNAMIC_HOST_KEEP=y

              #EGO_ENABLE_AUTO_DAEMON_SHUTDOWN=Y

              LSF_DYNAMIC_HOST_TIMEOUT=60m

              EOF

              # LSF 10.1 Fix14 support lsfd.service to handle each daemon seperately. It need to change the process to run the LSF daemon

              systemctl stop lsfd
              cp $LSF_SERVERDIR/lsf_daemons $LSF_SERVERDIR/lsf_daemons_org
              cp $LSF_INSTALL_DIR/10.1/install/instlib/startup.svr4 $LSF_SERVERDIR/lsf_daemons

              sed -i -e "s|@LSF_CONF@|$LSF_ENVDIR/lsf.conf|" $LSF_SERVERDIR/lsf_daemons

              # Configure system scripts to start LSF at boot time
              # Add cshrc.lsf and profile.lsf to system-wide environment
              # Start LSF daemons
              $LSF_INSTALL_DIR/10.1/install/hostsetup --top="$LSF_INSTALL_DIR" \
                                                      --boot="y" \
                                                      --profile="y" \
                                                      --start="y"
              
              # systemctl daemon-reload
              # $LSF_BINDIR/badmin hstartup
              # $LSF_BINDIR/lsadmin limstartup
              # $LSF_BINDIR/lsadmin resstartup
              systemctl start lsfd


              # Verify that LSF is up and send signal to Cloudformation
              sleep 5
              lsid
              /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource LSFMasterInstance --region ${AWS::Region}

              echo "*** END LSF MASTER BOOTSTRAP ***"

            - LSFComputeNodeInstanceProfileArn: !GetAtt LSFComputeNodeInstanceProfile.Arn
              LSFComputeNodeSpotFleetRoleArn: !GetAtt LSFSpotFleetRole.Arn
              LSFComputeNodeAmi: !FindInMap [ RegionMap, !Ref "AWS::Region", !Ref ComputeAMI ]
              LSFComputeNodeGravitonAmi: !FindInMap [ RegionMap, !Ref "AWS::Region", !Ref "GravitonAMI" ]
              LSFComputeNodeSGGroupId:
                Fn::ImportValue: !Join [ '-', [ !Ref LSFClusterName,"LSFComputeNodeSG" ] ]
              LSFComputeNodeSubnet:
                Fn::ImportValue: !Join [ '-', [ !Ref LSFClusterName,"PrivateSubnet" ] ]
              LSFComputeNodeSubnet1:
                Fn::ImportValue: !Join [ '-', [ !Ref LSFClusterName,"PrivateSubnet2" ] ]
              LSFLaunchTemplateId: !GetAtt LSFComputeLaunchTemplate.LaunchTemplateId
              

  LSFMasterRole:
      Type: "AWS::IAM::Role"
      Properties:
        Description: AWS service permissions for LSF Resource Connector
        Path: "/"
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - 
              Effect: Allow
              Principal:
                Service:
                - "ec2.amazonaws.com"
              Action:
              - "sts:AssumeRole"
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
          - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
          - "arn:aws:iam::aws:policy/AmazonFSxReadOnlyAccess"
        Policies:
          - PolicyName: LSFResourceConnectorPerms
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - ec2:DescribeInstances
                    - ec2:DescribeInstanceStatus
                    - ec2:DescribeKeyPairs
                    - ec2:RunInstances
                    - ec2:TerminateInstances
                    - ec2:CreateFleet
                    - ec2:CreateTags
                    - ec2:ModifyIdFormat
                    - ec2:AssociateIamInstanceProfile
                    - ec2:ReplaceIamInstanceProfileAssociation
                    - ec2:CancelSpotFleetRequests
                    - ec2:DescribeSpotFleetInstances
                    - ec2:DescribeSpotFleetRequests
                    - ec2:DescribeSpotFleetRequestHistory
                    - ec2:ModifySpotFleetRequest
                    - ec2:RequestSpotFleet
                    - ec2:DescribeSpotInstanceRequests
                    - ec2:DescribeLaunchTemplateVersions
                    - ec2:GetLaunchTemplateData
                    - ec2:CreateLaunchTemplateVersion
                    - ec2:DeleteLaunchTemplateVersions
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - iam:PassRole
                    - iam:ListRoles
                    - iam:ListInstanceProfiles
                    - iam:CreateServiceLinkedRole
                  Resource:
                    - !GetAtt LSFSpotFleetRole.Arn
                    - !GetAtt LSFComputeNodeRole.Arn
                  Condition:
                      StringEquals:
                        iam:PassedToService:
                            "ec2.amazonaws.com"
                - Effect: Allow
                  Action:
                    - s3:GetObject
                  Resource: '*'
          - PolicyName: LSFEC2FleetRolePolicyCustom
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - ec2:DescribeImages
                    - ec2:DescribeSubnets
                    - ec2:RequestSpotInstances
                    - ec2:TerminateInstances
                    - ec2:DescribeInstanceStatus
                    - ec2:RunInstances
                    - ec2:CreateFleet
                    - ec2:CreateTags
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - iam:CreateServiceLinkedRole
                    - iam:ListRoles
                    - iam:ListInstanceProfiles
                  Resource: '*'
                  Condition:
                    StringEquals:
                      iam:AWSServiceName: 
                          "spot.amazonaws.com"
                - Effect: Allow
                  Action:
                    - iam:PassRole
                  Resource:
                    - !GetAtt LSFSpotFleetRole.Arn
                    - !GetAtt LSFComputeNodeRole.Arn
                  Condition:
                    StringEquals:
                      iam:PassedToService:
                        - ec2.amazonaws.com
                        - ec2.amazonaws.com.cn
                - Effect: Allow
                  Action:
                    - ec2:CreateTags
                  Resource:
                    - arn:aws:ec2:*:*:instance/*
                    - arn:aws:ec2:*:*:spot-instances-request/*
                - Effect: Allow
                  Action:
                    - ec2:CreateTags
                  Resource:
                    - arn:aws:ec2:*:*:volume/*
                  Condition:
                    StringEquals:
                      ec2:CreateAction: 
                          "RunInstances"
                - Effect: Allow
                  Action:
                    - ec2:TerminateInstances
                  Resource: '*'
                  Condition:
                    StringLike:
                      ec2:ResourceTag/aws:ec2:fleet-id: 
                          '*'
        #ManagedPolicyArns:
        #  - "arn:aws:iam::aws:policy/aws-service-role/AWSEC2FleetServiceRolePolicy"

  LSFSpotFleetRole:
      Type: "AWS::IAM::Role"
      Properties:
        Description: Enables EC2 Spot Fleet to work on behalf of LSF Resource Connector
        Path: "/"
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - 
              Effect: Allow
              Principal:
                Service:
                - "spotfleet.amazonaws.com"
              Action:
              - "sts:AssumeRole"
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole"

  LSFComputeNodeRole:
      Type: "AWS::IAM::Role"
      Properties:
        Description: AWS service permissions for LSF compute nodes
        Path: "/"
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - 
              Effect: Allow
              Principal:
                Service:
                - "ec2.amazonaws.com"
              Action:
              - "sts:AssumeRole"
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
          - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
          - "arn:aws:iam::aws:policy/AmazonFSxReadOnlyAccess"
        Policies:
          - PolicyName: DownloadS3Packages
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - s3:GetObject
                  Resource: '*'

  LSFMasterInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - !Ref LSFMasterRole

  LSFComputeNodeInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - !Ref LSFComputeNodeRole
  
  LSFComputeLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn: LSFComputeNodeInstanceProfile
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-launch-template-for-ec2-fleet'
      LaunchTemplateData: 
        IamInstanceProfile: 
          Arn: !GetAtt
            - LSFComputeNodeInstanceProfile
            - Arn
        DisableApiTermination: false
        ImageId: !FindInMap [ RegionMap, !Ref "AWS::Region", !Ref ComputeAMI ]
        KeyName: !Ref AdminKeyPair
        SecurityGroupIds:
          - Fn::ImportValue: !Join [ '-', [ !Ref LSFClusterName,"LSFComputeNodeSG" ] ]

  LSFElasticFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: !Ref EFSPerformanceMode
      ThroughputMode: !Ref EFSThroughputMode
      Encrypted: true
      FileSystemTags:
        - Key: Name
          Value: !Join [ '', [ 'Infra Tools - ',!Ref 'AWS::StackName' ] ]

  LSFEFSMountTarget:
      Type: AWS::EFS::MountTarget
      Properties:
        FileSystemId: !Ref LSFElasticFileSystem
        SubnetId: 
          Fn::ImportValue: !Join [ '-', [ !Ref LSFClusterName,"PrivateSubnet" ] ]
        SecurityGroups:
          - 
            Fn::ImportValue: !Join [ '-', [ !Ref LSFClusterName,"LSFEFSMountTargetSG" ] ]

  # Need root to access the /tools directory that LSF is configured in. 
  LSFEFSAccessPointRoot: 
    Type: 'AWS::EFS::AccessPoint'
    Properties:
      FileSystemId: !Ref LSFElasticFileSystem
      PosixUser:
        Uid: "0"
        Gid: "0"
      RootDirectory:
        CreationInfo:
          OwnerGid: "0"
          OwnerUid: "0"
          Permissions: "0777"
        Path: "/"

Outputs:
  LSFElasticFileSystemFQDN:
    Description: EFS FQDN
    Value: !Join [ '.', [ !Ref LSFElasticFileSystem, "efs", !Ref "AWS::Region", "amazonaws.com"  ] ]
    Export:
      Name: !Join [ '-', [ !Ref LSFClusterName,"LSFEFSFileSystemFQDN" ] ]
  LSFMasterInstanceIP:
    Description: LSF Master Private IP Address
    Value: !GetAtt LSFMasterInstance.PrivateIp
    Export:
      Name: !Join [ '-', [ !Ref LSFClusterName,"LSFMasterPrivateIP"] ]
  LSFMasterInstanceHostName:
    Description: LSF Master Hostname
    Value: !GetAtt LSFMasterInstance.PrivateDnsName
    Export:
      Name: !Join [ '-', [ !Ref LSFClusterName,"LSFMasterHostName"] ]
  LSFMasterInstanceId:
    Description: LSF Master Instance Id
    Value: !Ref LSFMasterInstance
    Export:
      Name: !Join [ '-', [ !Ref LSFClusterName,"LSFMasterInstanceId"] ]
  LSFEFSAccessPointArn:
    Description: Access point ARN for EFS FS
    Value: !GetAtt LSFEFSAccessPointRoot.Arn
    Export:
      Name: !Join [ '-', [ !Ref LSFClusterName,"LSFEFSAccessPointArn"] ]
