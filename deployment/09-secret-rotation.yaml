AWSTemplateFormatVersion: 2010-09-09

Parameters:
  SecretsManagerId:
    Type: String
    Description: The ARN or name of the secret to rotate.
    Default: 'fsxadmin'
  OnPremFileSystemId:
    Description: OnPrem File System ID
    Type: String
  CloudFileSystemId:
    Description: Cloud File System ID
    Type: String
  SourceS3Bucket:
    Default: "cloudscale-deployment-bucket-123"
    Description: url prefix for the bucket that has all the files for deploying this prototype. 
    Type: String


Resources:  
  FSxNSecretsManagerLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'lambda.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
      - PolicyName: 'FSxNSecretsManagerLambdaUserPolicy'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'secretsmanager:DescribeSecret'
            - 'secretsmanager:GetSecretValue'
            - 'secretsmanager:GetResourcePolicy'
            - 'secretsmanager:PutSecretValue'
            - 'secretsmanager:RotateSecret'
            - 'secretsmanager:ListSecrets'
            - 'secretsmanager:UpdateSecretVersionStage'
            Resource: 'arn:aws:secretsmanager:*:*:secret:*'
          - Effect: Allow
            Action:
              - 'fsx:UpdateFileSystem'
              - 'fsx:DescribeFileSystems'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'secretsmanager:GetRandomPassword'
            Resource: '*'

  LambdaSecretsManagerPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: 'FSxNSecretsManagerRotatorFunction'
      Principal: 'secretsmanager.amazonaws.com'
    DependsOn: FSxNSecretsManagerRotatorFunction

  FSxNSecretsManagerRotation:
    Type: 'AWS::SecretsManager::RotationSchedule'
    Properties:
      RotationLambdaARN: !GetAtt 'FSxNSecretsManagerRotatorFunction.Arn'
      SecretId: !Ref SecretsManagerId
      RotationRules:
        Duration: 4h
        ScheduleExpression: 'rate(10 days)'
    DependsOn: FSxNSecretsManagerRotatorFunction

  FSxNSecretsManagerRotatorFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'FSxNSecretsManagerRotatorFunction'
      Description: 'Lambda Function for rotating the systems-manager password for fsxadmin'
      Handler: 'index.lambda_handler'
      Runtime: 'python3.9'
      Timeout: 30
      Role: !GetAtt 'FSxNSecretsManagerLambdaExecutionRole.Arn'
      Environment:
        Variables:
          OnPremFsx: !Ref OnPremFileSystemId 
          CloudFsx: !Ref CloudFileSystemId
      Code:
        ZipFile: |
              # Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
              # SPDX-License-Identifier: MIT-0
              ################################################################################
              #
              # FSx/N Secrets Manager Password Rotator
              # June 25th, 2023, @mcaws
              # March 25, 2024, @tjm
              # May 21, 2004 @tjm
              #
              ################################################################################

              import boto3
              import logging
              import os
              import json

              logger = logging.getLogger()
              logger.setLevel(logging.INFO)

              def lambda_handler(event, context):
                OnPremFsx = os.environ['OnPremFsx']
                CloudFsx = os.environ['CloudFsx']

                FSIDlist = [OnPremFsx, CloudFsx]

                for id in FSIDlist:
                  if id == '':
                      logger.error("FSID is empty")
                      raise ValueError("FSID is empty")

                  FSID = id
                  arn = event['SecretId']
                  token = event['ClientRequestToken']
                  step = event['Step']

                  this_region = os.environ['AWS_REGION']
                  logger.info("Region is: %s." % (this_region))
                  service_client = boto3.client('secretsmanager', this_region)

                  metadata = service_client.describe_secret(SecretId=arn)
                  if not metadata['RotationEnabled']:
                      logger.error("Secret %s is not enabled for rotation" % arn)
                      raise ValueError("Secret %s is not enabled for rotation" % arn)
                  versions = metadata['VersionIdsToStages']
                  if token not in versions:
                      logger.error("Secret version %s has no stage for rotation of secret %s." % (token, arn))
                      raise ValueError("Secret version %s has no stage for rotation of secret %s." % (token, arn))
                  if "AWSCURRENT" in versions[token]:
                      logger.debug("Secret version %s already set as AWSCURRENT for secret %s." % (token, arn))
                      return
                  elif "AWSPENDING" not in versions[token]:
                      logger.error("Secret version %s not set as AWSPENDING for rotation of secret %s." % (token, arn))
                      raise ValueError("Secret version %s not set as AWSPENDING for rotation of secret %s." % (token, arn))

                  if step == "createSecret":
                      logger.info("Calling createSecret")   
                      create_secret(service_client, arn, token)

                  elif step == "setSecret":
                      logger.info("Calling setSecret")   
                      set_secret(service_client, arn, token)

                  elif step == "testSecret":
                      logger.info("Calling testSecret")   
                      test_secret(service_client, arn, token)

                  elif step == "finishSecret":
                      logger.info("Calling finishSecret")   
                      finish_secret(service_client, arn, token)

                  else:
                      raise ValueError("Invalid step parameter: %s" % (step))


              def create_secret(service_client, arn, token):
                  try:
                      check_pending_secret = service_client.get_secret_value(SecretId=arn, VersionId=token, VersionStage="AWSPENDING")
                      logger.info(f"CreateSecret: There already was a PENDING secret {check_pending_secret} for {arn}")

                  except service_client.exceptions.ResourceNotFoundException:
                      exclude_characters = os.environ['EXCLUDE_CHARACTERS'] if 'EXCLUDE_CHARACTERS' in os.environ else '"\\\"\',./:;<>?[]{|}~`@'
                      passwd = service_client.get_random_password(PasswordLength=16, ExcludeCharacters=exclude_characters)

                      mysecret = '{"username":"fsxadmin","password":"' + str(passwd['RandomPassword']) + '"}'
                      pending_secret = service_client.put_secret_value(SecretId=arn, ClientRequestToken=token, SecretString=mysecret, VersionStages=['AWSPENDING'])

                      logger.debug("create_secret: The PENDING secret is:  %s." % (mysecret))

              def set_secret(service_client, arn, token):
                  pending_secret = service_client.get_secret_value(SecretId=arn, VersionId=token, VersionStage="AWSPENDING")
                  pending_secret_text = pending_secret['SecretString']
    
                  data = json.loads(pending_secret_text)
                  jtp = data['password']
                  desc_fsx_service_client = boto3.client('fsx')
                  response = desc_fsx_service_client.describe_file_systems()

                  logger.debug("Response from fsx DescribeFileSystems call is: %s" % (response))

                  fsx_service_client = boto3.client('fsx')
                  response = fsx_service_client.update_file_system(
                      FileSystemId=FSID,
                      ClientRequestToken=token,
                      OntapConfiguration={'FsxAdminPassword': jtp}
                  )
                  desc_fsx_service_client.close()
                  fsx_service_client.close()
                  return 0

              def test_secret(service_client, arn, token):
                  testfsx_service_client = boto3.client('fsx')
                  response = testfsx_service_client.describe_file_systems()
                  logger.info("Response from fsx DescribeFileSystems call is: %s" % (response))
                  testfsx_service_client.close()
                  return 0 

              def finish_secret(service_client, arn, token):
                  metadata = service_client.describe_secret(SecretId=arn)
                  current_version = None
                  for version in metadata["VersionIdsToStages"]:
                      if "AWSCURRENT" in metadata["VersionIdsToStages"][version]:
                          if version == token:
                              logger.info("finish_secret: Version %s has already been marked CURRENT for %s" % (version, arn))
                              return
                          current_version = version
                          break
                  service_client.update_secret_version_stage(SecretId=arn, VersionStage="AWSCURRENT", MoveToVersionId=token, RemoveFromVersionId=current_version)
                  logger.info("FinishSecret: Successfully set the AWSCURRENT label to version %s for ARN %s." % (current_version, arn))
  